<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>二分</title>
    <url>/2022/10/11/%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<p>不同于有序数组的简单二分查找，<a href="https://www.acwing.com/problem/content/791/">789. 数的范围</a>在更新区间时包含mid，需要考虑边界问题。<br><span id="more"></span></p>
<h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h3><p>给定一个按照升序排列的长度为n的整数数组a，返回一个元素k的起始位置和终止位置（位置从0开始计数）。</p>
<h3 id="2-解题思想"><a href="#2-解题思想" class="headerlink" title="2. 解题思想"></a>2. 解题思想</h3><p>解题思想比较直接，就是分别找到第一个不小于k的元素和最后一个不大于k的元素位置。</p>
<h3 id="3-二分查找"><a href="#3-二分查找" class="headerlink" title="3. 二分查找"></a>3. 二分查找</h3><p>查找的过程可以使用二分的思想，注意这里与简单的二分查找不同，被称为二分答案。在二分查找中，充分利用a[mid]与k的大小关系，当a[mid] &lt; k时，就到右区间[mid + 1, r]继续查找k；当a[mid] &gt; k时，就到左区间[l, mid - 1]继续查找k；当a[mid] == k或者查找区间长度为0时，查找结束。在二分查找的过程中下一次查找的区间是不包括上一次查找区间的mid的，这种情况下不需要考虑边界问题。</p>
<h3 id="4-二分答案"><a href="#4-二分答案" class="headerlink" title="4. 二分答案"></a>4. 二分答案</h3><p>在数据范围这道题目中，大小为k的元素有多个，更新区间时包含需要包含mid。下面具体看一下二分答案的两个模板。<br><strong>模板1</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">check</span>(mid))  r = mid;    <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line">    <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>模板2</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">check</span>(mid))  l = mid;</span><br><span class="line">    <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>前人已经总结出的规律是：</p>
<blockquote>
<p>第一个模板是尽量往左找目标，第二个模板是尽量往右找目标。<br>只要是往左找答案，就用第一个模板，mid不用加一，r=mid，l加一；<br>只要是往右找答案，就用第二个模板，mid要加一，l=mid，r要减一；</p>
</blockquote>
<h3 id="5-边界问题"><a href="#5-边界问题" class="headerlink" title="5. 边界问题"></a>5. 边界问题</h3><p>二分答案的区间更新根据往左还是往右找目标进行设置，另外还有一个不同点就是mid是不是要加1，而加1与否的区别体现在：往右查找的目标元素在区间右边界的前一个（也就是倒数第二个）和往左查找的目标元素在区间左边界的后一个（也就是正数第二个），在这两种情况下，找到最后的时候，如果mid设置不对，区间长度一直为1，区间保持不变，会陷入死循环。<br>下面是往右找目标元素3时，mid加1与不加1的过程演示。<br><img src="https://cdn.jsdelivr.net/gh/AtZDD/imgs/Blogs/QQ图片20221011121929.jpg" alt="QQ图片20221011121929"><br>记住往右找加1，往左找不加1，区间更新做题的时候是能很快想出来的。<br>另外也有人针对如何在最后跳出长度为1的区间死循环，更改循环条件为l+1 != r，也是一种思路，记住一种模板即可。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> L=<span class="number">-1</span>,R=n;</span><br><span class="line"><span class="keyword">while</span>(L+<span class="number">1</span>!=R)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> mid=L+R&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">check</span>()) L=mid;</span><br><span class="line">	<span class="keyword">else</span> R=mid;</span><br><span class="line">	<span class="comment">//最后根据你所分左右两边区间的结果</span></span><br><span class="line">	<span class="comment">//选取L或者R作为结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://blog.csdn.net/Mr_dimple/article/details/114656142?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-114656142-blog-126360962.pc_relevant_3mothn_strategy_and_data_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-114656142-blog-126360962.pc_relevant_3mothn_strategy_and_data_recovery&amp;utm_relevant_index=3">二分查找 &amp; 二分答案 万字详解，超多例题，带你学透二分。</a></li>
<li><a href="https://blog.csdn.net/WJPnb1/article/details/126360962?spm=1001.2014.3001.5502">不需要考虑mid+1、mid-1的二分查找模板，希望大家都能学会</a></li>
</ol>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>算法</tag>
        <tag>整数二分</tag>
      </tags>
  </entry>
  <entry>
    <title>最长上升子序列</title>
    <url>/2022/09/19/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<p>最长上升子序列是使用动态规划求解的经典题目。<br><a href="https://www.luogu.com.cn/problem/B3637">B3637 最长上升子序列</a><br><span id="more"></span></p>
<h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h3><p>给定一个长度为N的数列(w[N])，求数值严格单调递增的子序列的长度最长是多少。</p>
<h3 id="2-动态规划"><a href="#2-动态规划" class="headerlink" title="2. 动态规划"></a>2. 动态规划</h3><p>使用动态规划的核心是构造状态转移表达式，先来看看这道题目是如何定义状态及转移方程的。<br>定义f[i]表示以w[i]结尾的最大上升序列长度，则在w[i] &gt; w[j]时，f[i] = max(f[i], f[j] + 1)，j=0,1,2,…,i-1。上面这种情况的时候要更新状态是不难理解的，但是这也导致f[i]是由小于i的最优解通过增加w[i]产生的，有没有可能f[i]是由小于i的非最优解产生的呢，也就是说在w[i] &lt;= w[j]时，f[j]也存在信息，可以用于产生最优解，其实仔细想一下这种情况就是去除w[j]后的上升子序列加上w[i]构成的，那么一定会存在一个对应于w[i] &gt; w[q]，并使用f[i] = max(f[i], f[q] + 1)进行更新，所以在w[i] &lt;= w[j]时是不用再进行更新的。<br>下面看一下代码。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> w[<span class="number">5010</span>]; <span class="comment">//输入序列</span></span><br><span class="line"><span class="type">int</span> f[<span class="number">5010</span>]; <span class="comment">//状态记录</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i; i &lt; n; i ++) &#123;</span><br><span class="line">        cin &gt;&gt; w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mx = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        f[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(w[i] &gt; w[j]) &#123;</span><br><span class="line">                f[i] = <span class="built_in">max</span>(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mx = <span class="built_in">max</span>(mx, f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; mx;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>动态规划的代码总是很简洁明了，但是想出来思路就很难，特别是第一次遇到某个题目。</p>
<h3 id="3-输出一个最长上升子序列"><a href="#3-输出一个最长上升子序列" class="headerlink" title="3. 输出一个最长上升子序列"></a>3. 输出一个最长上升子序列</h3><p>根据f[n]状态记录数组的定义，可以从小到大依次输出状态记录分别为mx,mx-1,…,1。最长上升子序列显然是可能不唯一的，下面的代码只输出一个。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> mx = <span class="number">1</span>, pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(mx &lt;= f[i]) &#123;</span><br><span class="line">        mx = f[i];</span><br><span class="line">        pos = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出一个最长上升子序列</span></span><br><span class="line"><span class="type">int</span> *num = <span class="keyword">new</span> <span class="built_in">int</span>(mx);</span><br><span class="line">num[<span class="number">0</span>] = w[pos];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = pos - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">    <span class="keyword">if</span>(f[i] == mx - <span class="number">1</span>) &#123;</span><br><span class="line">        num[++ cnt] = w[i];</span><br><span class="line">        mx --;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = cnt; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; cnt) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; num[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://blog.csdn.net/dl962454/article/details/107434055">最长上升子序列(序列长度+序列输出)</a></li>
</ol>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>素数的判定：筛法</title>
    <url>/2022/09/17/%E7%B4%A0%E6%95%B0%E7%9A%84%E5%88%A4%E5%AE%9A%EF%BC%9A%E7%AD%9B%E6%B3%95/</url>
    <content><![CDATA[<p>素数很有用，特别是在密码学领域中，比如RSA中很重要的一步就是寻找两个比较大的素数，通常的做法是先随机生成一个大整数，然后使用一些素性判定的方法，比如费马素性测试。在算法竞赛的数论题目中，素数也很常见，通常的做法是先找出一定范围内的所有素数，用到时再查表，筛法就可以做到。<br><span id="more"></span></p>
<h3 id="1-埃氏筛"><a href="#1-埃氏筛" class="headerlink" title="1. 埃氏筛"></a>1. 埃氏筛</h3><p>埃拉托斯特尼筛法，简称埃氏筛。埃氏筛的原理是直观的，基于这样一个事实：素数不能被任意比它小的、除1以外的数整除；合数一定存在一个比它小且不为1的数整除。从2开始，当能确定一个数是质数时，就可以把这个数的整数倍标记为合数。从小到大遍历到一个数，如果它依然没有被标记为合数，那么就能确定它是质数。筛法中用到的数只有质数，筛选的对象是合数。这样做可以减少操作次数，并且可以筛掉所有的合数。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> isPrime[<span class="number">100000010</span>];</span><br><span class="line"><span class="comment">//isPrime[i] == 1表示i是素数</span></span><br><span class="line"><span class="type">int</span> Prime[<span class="number">60000010</span>], cnt;</span><br><span class="line"><span class="comment">//Prime存质数</span></span><br><span class="line"><span class="type">int</span> n, q, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetPrime</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(isPrime, <span class="literal">true</span>, <span class="built_in">sizeof</span>(isPrime));</span><br><span class="line">    isPrime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    isPrime[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(isPrime[i]) &#123;</span><br><span class="line">            Prime[cnt ++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">2</span>; i * j &lt;= n; j ++) &#123;</span><br><span class="line">                isPrime[i * j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-欧拉筛"><a href="#2-欧拉筛" class="headerlink" title="2. 欧拉筛"></a>2. 欧拉筛</h3><p>埃氏筛存在重复筛的情况，欧拉筛可以保证范围内的每个合数都被筛掉，并且任一合数只被最小质因数筛掉，也就是只被筛一次。欧拉筛的时间复杂度为O(n)，因此也被成为线性筛。<br>先来看一下代码。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> isPrime[<span class="number">100000010</span>];</span><br><span class="line"><span class="comment">//isPrime[i] == 1表示i是素数</span></span><br><span class="line"><span class="type">int</span> Prime[<span class="number">60000010</span>], cnt;</span><br><span class="line"><span class="comment">//Prime存质数</span></span><br><span class="line"><span class="type">int</span> n, q, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetPrime</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(isPrime, <span class="literal">true</span>, <span class="built_in">sizeof</span>(isPrime));</span><br><span class="line">    isPrime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    isPrime[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(isPrime[i]) &#123;</span><br><span class="line">            Prime[cnt ++] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; i * Prime[j] &lt;= n; j ++) &#123;</span><br><span class="line">            isPrime[i * j] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % Prime[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//保证只被“最小质因数 × 最大因数（非自己） = 这个合数”筛掉</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>线性筛的代码和埃氏筛很相似，比较明显的不同有两处，埃氏筛中的i一定是质数，而线性筛的i是小于等于n的所有数，Prime[j]一定是质数；另一个不同就是线性筛的条件判定提前结束内层循环。我们知道欧拉筛的线性时间复杂度是因为合数只被筛一次，也就是“最小质因数 × 最大因数（非自己） = 这个合数”，条件判定提前结束就保证了这件事。举一个例子，使用埃氏筛，30会被2(*15)、3(*10)和5(*6)筛三次，在线性筛中i依次遍历到2，3，5的时候是不可能筛掉30的，因为i只和小于自己的质数相乘，i遍历到6时，因为6能整除2，所以只会筛掉12，而不会筛掉和3、5相乘得到的18、30，这是因为对于30而言可以分解为6*5，而6可以整除2的话，那么必然可以将2分给5得到一个更大的数，也就是10，所以要结束。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://blog.csdn.net/u014042772/article/details/121587507">埃氏筛、欧拉筛详解</a></li>
</ol>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>算法</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>学习：复现Word2vec模型Skip-Gram的过程记录</title>
    <url>/2022/08/23/%E5%A4%8D%E7%8E%B0Word2vec%E6%A8%A1%E5%9E%8BSkipGram/</url>
    <content><![CDATA[<p>本文word2vec原理参考：<a href="https://blog.csdn.net/weixin_35757704/article/details/124557465">NLP扎实基础1：Word2vec模型Skip-Gram Pytorch复现</a></p>
<span id="more"></span>
<h3 id="1-Skip-Gram与CBOW的区别"><a href="#1-Skip-Gram与CBOW的区别" class="headerlink" title="1. Skip-Gram与CBOW的区别"></a>1. Skip-Gram与CBOW的区别</h3><p>CBOW（Continuous Bag-of-Words）和 Skip-Gram（Continuous Skip-gram Model）是Mikolov设计的两种用于计算连续的、分布式的词向量的模型，作者用一副非常概括、简洁的示意图来表明这两种模型的区别，这也是该论文中唯一的图。<br><img src="https://cdn.jsdelivr.net/gh/AtZDD/imgs/Blogs/20220823205513.png" alt="20220823205513"></p>
<p>这幅图很有对称的美，但是也很有迷惑性，在没有深入理解代码前，是很难想到作者真正实现的方法与思想。CBOW模型输入是滑动窗口内背景词的平均，输出是中心词是词典中某个词的对数softmax。Skip-Gram模型的输入相对而言就比较复杂，分别是中心词，背景词以及随机采样得到的噪声词，而后两者也被称为正例和负例，输出则是中心词与负例词向量的内积减去与正例词的内积，这也就是优化的目标。</p>
<h3 id="2-词向量表示的目标"><a href="#2-词向量表示的目标" class="headerlink" title="2. 词向量表示的目标"></a>2. 词向量表示的目标</h3><p>我们都知道分布式词向量的提出是神经概率语言模型的副产物，后者致力于对一个句子的概率做出预测，在该论文《A Neural Probabilistic Language Model》中举了两个例子:</p>
<ul>
<li>The cat is walking in the bedroom</li>
<li>A dog was running in a room </li>
</ul>
<p>第一个句子是在语料库中的，那么神经概率语言模型应该会得到一个比较大的概率值，同时第二个句子中的词都是与第一个句子中的词一一对应并且语义上相似的，也应该有一个较大的概率，然后在论文中写到“In the proposed model, it will so generalize because “similar” words should have a similar feature vector”，也就是说语义相似的词应该要有相近的特征向量表示，这样上面两个句子才能有相近的概率。</p>
<h3 id="3-殊途同归，尝试解释"><a href="#3-殊途同归，尝试解释" class="headerlink" title="3. 殊途同归，尝试解释"></a>3. 殊途同归，尝试解释</h3><p>Skip-Gram与CBOW模型继承了这样的目标，但是实现的方法却不一样。Mikolov提出了这两种模型，并设计了测试的方法，但是论文中并没有提到设计的动机，对这两种模型进行解释有一些讨论。</p>
<p>首先是CBOW模型，模型的输入是背景词的平均，有一部分人是这样解释的：“句子中挨得越近的词越相似，离的越远的词越不同”，这似乎是对平均操作的分析结果。这样的想法首先违背了一般的常识，一个句子中的各个单词有不同的作用，词性也基本都不同，而且语义相似的词在一个句子里重复出现也显得累赘。《<a href="https://blog.csdn.net/weixin_35757704/article/details/124557465">NLP扎实基础1：Word2vec模型Skip-Gram Pytorch复现</a>》举了一组例子：“我/爱/跑步”，“我/爱/撸串”，“我/爱/烤串”，并说明虽然“我”和“爱”、“撸串”没有明显联系，但是这三个句子里“撸串”、“烤串”、“跑步”就有一定的关联，当采用CBOW或Skip-Gram训练时，这三个词会越来越近。当语料足够大的时候，“撸串”和“烤串”同时出现在类似的句子中的概率是非常大的，但是“跑步”出现的句子场景就不同了，因此就把“撸串”、“烤串”越训练越接近，而“跑步”就稍稍疏远。这个说明与神经概率语言模型中的例子有相似的思想。但是结合《<a href="https://blog.csdn.net/weixin_35757704/article/details/124559926">NLP扎实基础2：Word2vec模型CBOW Pytorch复现</a>》具体实现的代码就会发现存在一些问题，如果我们认为相似的词出现在相似的语境，词与词的差别会体现在语境里（这里的语境特指滑动窗口内的背景词），那么对于两个非常相似的词而言，他们有非常一致的语境，但是在词典中的位置确不一样，由于word2vec模型输出的是对数softmax，这时即使语境是相似的，模型输出也是相似的，但是和实际中心词还是会存在较大差距。</p>
<p>对于Skip-Gram模型来说，优化的目标是：中心词与背景词的内积要小，与噪声词的内积要大，乍一看似乎是因为“句子中挨得越近的词越相似，离的越远的词越不同”，但我认为其实是</p>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>NLP</tag>
        <tag>深度学习</tag>
        <tag>未完成</tag>
      </tags>
  </entry>
  <entry>
    <title>学习：复现Word2vec模型CBOW的过程记录</title>
    <url>/2022/08/21/%E5%A4%8D%E7%8E%B0Word2vec%E6%A8%A1%E5%9E%8BCBOW/</url>
    <content><![CDATA[<p>本文word2vec原理参考：<a href="https://blog.csdn.net/weixin_35757704/article/details/124559926">NLP扎实基础2：Word2vec模型CBOW Pytorch复现</a><br><span id="more"></span></p>
<p>看过之后，基本上是能够理解的，在自己的电脑上运行时，对一些地方有困惑，经过查阅相关资料后才搞懂，另外，原博客中的代码还有一些bug一并解决。</p>
<h3 id="1-CBOW是如何实现的"><a href="#1-CBOW是如何实现的" class="headerlink" title="1. CBOW是如何实现的"></a>1. CBOW是如何实现的</h3><p><img src="https://cdn.jsdelivr.net/gh/AtZDD/imgs/Blogs/20220822022114.png" alt="20220822022114"></p>
<p>结合上述原理图，可以知道CBOW训练的主要思路是用背景词预测中心词。在没有看代码之前，对于损失计算，我的想法是：使用背景词的预测结果与当前中心词的词嵌入向量计算损失。实际上训练词嵌入的网络的最后一层的形状是（隐藏层个数，单词表个数），所以在最后一层前应该要做softmax，这种做法应该是更合适的，使用当前中心词的词嵌入向量是一种以当前最优值替代理想最优的想法，应该也能行得通，不过可能训练的时间要更久（没有实验验证）。</p>
<h3 id="2-交叉熵损失"><a href="#2-交叉熵损失" class="headerlink" title="2. 交叉熵损失"></a>2. 交叉熵损失</h3><p>在看到使用交叉熵损失代码的时候，一看到会觉得不太对劲，损失计算的前后两个对象并不一致，这个就属于代码经验不足了。</p>
<h5 id="一个运行错误"><a href="#一个运行错误" class="headerlink" title="一个运行错误"></a>一个运行错误</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># loss = criterion(model_out, center_token)</span></span><br><span class="line">loss = criterion(model_out, center_token.long())</span><br></pre></td></tr></table></figure>
<p>原代码是python2版本的，直接运行会报错误“RuntimeError: expected scalar type Long but found Int”，修改一下即可。</p>
]]></content>
      <tags>
        <tag>记录</tag>
        <tag>NLP</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo：Hello World！</title>
    <url>/2022/03/07/hello-world/</url>
    <content><![CDATA[<p>欢迎 <a href="https://hexo.io/">Hexo</a>! 这是我的第一篇博客. 访问 <a href="https://hexo.io/docs/">documentation</a> 获取更多官方信息.本文主要记录一些常用发博客的操作以及遇到的问题。<br><span id="more"></span></p>
<h3 id="一、快速开始"><a href="#一、快速开始" class="headerlink" title="一、快速开始"></a>一、快速开始</h3><h4 id="1-发布一篇新博客"><a href="#1-发布一篇新博客" class="headerlink" title="1. 发布一篇新博客"></a>1. 发布一篇新博客</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h4 id="2-运行服务器"><a href="#2-运行服务器" class="headerlink" title="2. 运行服务器"></a>2. 运行服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h4 id="3-生成静态文件"><a href="#3-生成静态文件" class="headerlink" title="3. 生成静态文件"></a>3. 生成静态文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h4 id="4-部署到远程网站"><a href="#4-部署到远程网站" class="headerlink" title="4. 部署到远程网站"></a>4. 部署到远程网站</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h4 id="5-上传图片"><a href="#5-上传图片" class="headerlink" title="5. 上传图片"></a>5. 上传图片</h4><p>图床使用github + picgo + vscode。<br>从剪贴板处上传图片: Ctrl + Alt + U<br>从文件管理器上传图片: Ctrl + Alt + E</p>
<h4 id="6-文章评论"><a href="#6-文章评论" class="headerlink" title="6. 文章评论"></a>6. 文章评论</h4><p>使用<a href="https://github.com/settings/applications/new">Gitment</a>支持评论管理， gitment是imsun利用github上的issues做的评论系统，注册简单，实现方便，还没有广告。</p>
<h3 id="二、遇到的问题"><a href="#二、遇到的问题" class="headerlink" title="二、遇到的问题"></a>二、遇到的问题</h3><h4 id="1-博客根目录与主题目录下-config-yml文件不一致"><a href="#1-博客根目录与主题目录下-config-yml文件不一致" class="headerlink" title="1. 博客根目录与主题目录下_config.yml文件不一致"></a>1. 博客根目录与主题目录下_config.yml文件不一致</h4><p>博客根目录与主题目录下都有_config.yml文件，如果发生冲突的话后者的优先级较高，可以在后者配置局部的、与某一主题强相关的配置，而在前者配置所有主题都适用的全局配置。<br>有很多东西已经配置并且部署后没有显示，可能是因为没有在主题目录下进行配置。</p>
<h4 id="2-“所有文章”模块缺失"><a href="#2-“所有文章”模块缺失" class="headerlink" title="2. “所有文章”模块缺失"></a>2. “所有文章”模块缺失</h4><p>添加“所有文章”功能的流程主要参考<a href="https://blog.51cto.com/u_15477117/4919758">hexo博客添加本地搜索功能</a>。</p>
<h4 id="3-yilia主题作者名字不显示"><a href="#3-yilia主题作者名字不显示" class="headerlink" title="3. yilia主题作者名字不显示"></a>3. yilia主题作者名字不显示</h4><p><a href="https://blog.csdn.net/monster_rl/article/details/112292045">解决 hexo yilia主题作者名字不显示问题</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://zhuanlan.zhihu.com/p/26625249/">GitHub+Hexo 搭建个人网站详细教程</a></li>
<li><a href="https://blog.csdn.net/qq_41603102/article/details/112597479">使用GitHub搭建个人免费快速的图床</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/56943330">使用vscode开始Markdown写作之旅</a></li>
<li><a href="https://blog.csdn.net/weixin_43935907/article/details/89335062">Hexo博客yilia主题添加Gitment评论系统</a></li>
</ol>
]]></content>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>yilia</tag>
      </tags>
  </entry>
</search>
